<?php// Add Link to landing page listadd_action( 'wp_before_admin_bar_render', 'wp_cta_list_page_admin_bar' );function wp_cta_list_page_admin_bar() {	global $post;	global $wp_admin_bar;	if (!is_admin() && isset($post) && $post->post_type=='wp-call-to-action')	{		$wp_admin_bar->add_menu( array(		'id' => 'wp-cta-list-pages',		'title' => __( 'View Call to Action List' , 'cta' ),		'href' => '/wp-admin/edit.php?post_type=wp-call-to-action'		) );	}}// Kill admin bar on visual editor preview windowif (isset($_GET['cache_bust'])){	show_admin_bar( false );}// Admin Side Print out varaitions toggles for preview iframesif (isset($_GET['wp_cta_iframe_window'])){	add_action('admin_enqueue_scripts','wp_cta_ab_previewer_enqueue');	function wp_cta_ab_previewer_enqueue()	{		wp_enqueue_style('wp_cta_ab_testing_customizer_css', WP_CTA_URLPATH . 'css/customizer-ab-testing.css');	}	show_admin_bar( false );	add_action('wp_head', 'wp_cta_preview_iframe');	function wp_cta_preview_iframe()	{		global $CTA_Variations;				$wp_cta_variation = (isset($_GET['wp-cta-variation-id'])) ? $_GET['wp-cta-variation-id'] : '0';		$cta_id = $_GET['post_id'];		$variations = $CTA_Variations->get_variations( $cta_id );		$post_type_is = get_post_type($cta_id); 		?>				<link rel="stylesheet" href="<?php echo WP_CTA_URLPATH . 'css/customizer-ab-testing.css';?>" />		<style type="text/css">		#variation-list {			position: absolute;			top: 0px;			left:0px;			padding-left: 5px;		}		#variation-list h3 {			text-decoration: none;			border-bottom: none;		}		#variation-list div {			display: inline-block;		}		#current_variation_id, #current-post-id {			display: none !important;		}		<?php if ($post_type_is !== "wp-call-to-action") {		echo "#variation-list {display:none !important;}";		} ?>		</style>		<script type="text/javascript">			jQuery(document).ready(function($) {			var current_page = jQuery("#current_variation_id").text();				// reload the iframe preview page (for option toggles)				jQuery('.variation-wp-cta').on('click', function (event) {					varaition_is = jQuery(this).attr("id");					var original_url = jQuery(parent.document).find("#TB_iframeContent").attr("src");					var current_id = jQuery("#current-post-id").text();					someURL = original_url;					splitURL = someURL.split('?');					someURL = splitURL[0];					new_url = someURL + "?wp-cta-variation-id=" + varaition_is + "&wp_cta_iframe_window=on&post_id=" + current_id;					//console.log(new_url);					jQuery(parent.document).find("#TB_iframeContent").attr("src", new_url);				});			 });			</script>		<?php		/*		if ( count($variations) < 2 )		{			echo '<div id="variation-list" class="no-abtests"><h3>'. __( 'No A/B Tests running for this page' , 'cta' ) .'</h3>';		}		else		{			echo '<div id="variation-list"><h3>'. __('Variations:' , 'cta' ) .'</h3>';			echo '<div id="current_variation_id">'.$wp_cta_variation.'</div>';		}				$i = 0;		foreach ($variations as $vid => $variation)		{			$current_view = ($vid == $wp_cta_variation) ? 'current-variation-view' : '';			echo "<div class='variation-wp-cta ".$current_view."' id=". $vid . ">";			echo $CTA_Variations->vid_to_letter( $cta_id , $vid );			// echo $val; number			echo "</div>";			$i++;		}		*/		echo "<span id='current-post-id'>$cta_id</span>";		echo '</div>';	}}function wp_cta_customizer_show_metabox($post,$key){	global $wp_cta_data;	//print_r($wp_cta_data);exit;	$key = $key['args']['key'];	$wp_cta_custom_fields = $wp_cta_data[$key]['options'];	$wp_cta_custom_fields = apply_filters('wp_cta_show_metabox',$wp_cta_custom_fields, $key);	wp_cta_customizer_render_metabox($key,$wp_cta_custom_fields,$post);}function wp_cta_customizer_render_metabox($key,$custom_fields,$post){	if (isset($custom_fields))	{		// Use nonce for verification		echo "<input type='hidden' name='wp_cta_{$key}_custom_fields_nonce' value='".wp_create_nonce('wp-cta-nonce')."' />";		// Begin the field table and loop		echo '<div class="form-table" >';		//print_r($custom_fields);exit;		foreach ($custom_fields as $field) {			$raw_option_id = str_replace($key . "-", "", $field['id']);			$label_class = $raw_option_id . "-label";			// get value of this field if it exists for this post			$meta = get_post_meta($post->ID, $field['id'], true);			if ((!isset($meta)&&isset($field['default'])&&!is_numeric($meta))||isset($meta)&&empty($meta)&&isset($field['default'])&&!is_numeric($meta))			{				//echo $field['id'].":".$meta;				//echo "<br>";				$meta = $field['default'];			}			echo '<div class="'.$field['id'].' '.$raw_option_id.' wp-call-to-action-option-row">					<div class="wp-call-to-action-table-header '.$label_class.'"><label for="'.$field['id'].'">'.$field['label'].' <div class="wp_cta_tooltip" title="'.$field['desc'].'"></div></label></div>					<div class="wp-call-to-action-option-td"><a id="click-'.$field['id'].'" class="click-this" href="#'.$field['id'].'">anchor</a>';					switch($field['type']) {						// default content for the_content						case 'default-content':							echo '<span id="overwrite-content" class="button-secondary">Insert Default Content into main Content area</span><div style="display:none;"><textarea name="'.$field['id'].'" id="'.$field['id'].'" class="default-content" cols="106" rows="6" style="width: 75%; display:hidden;">'.$meta.'</textarea></div>';							break;						// text						case 'colorpicker':							if (!$meta)							{								$meta = $field['default'];							}							echo '<input type="text" class="jpicker" style="background-color:#'.$meta.'" name="'.$field['id'].'" id="'.$field['id'].'" value="'.$meta.'" data-old="'.$meta.'" size="5" /><span class="button-primary new-save-wp-cta-frontend" id="'.$field['id'].'" style="margin-left:10px; display:none;">Update</span>';							break;						case 'datepicker':							echo '<div class="jquery-date-picker" id="date-picking">							<span class="datepair" data-language="javascript">										Date: <input type="text" id="date-picker-'.$key.'" class="date start" /></span>										Time: <input id="time-picker-'.$key.'" type="text" class="time time-picker" />										<input type="hidden" name="'.$field['id'].'" id="'.$field['id'].'" value="'.$meta.'" data-old="'.$meta.'" class="new-date" value="" >								</div>';							break;						case 'text':							echo '<input type="text" name="'.$field['id'].'" id="'.$field['id'].'" value="'.$meta.'" data-old="'.$meta.'" size="30" />';							break;						// textarea						case 'textarea':							echo '<textarea name="'.$field['id'].'" id="'.$field['id'].'" data-old="'.$meta.'" cols="106" rows="6" style="width: 75%;">'.$meta.'</textarea>';							break;						// wysiwyg						case 'wysiwyg':							echo '<div id="poststuff" class="wysiwyg-editor-area ">';							wp_editor( $meta, $field['id'], $settings = array() );							echo "</div>";							break;						// media						case 'media':							//echo 1; exit;							echo '<label for="upload_image">';							echo '<input name="'.$field['id'].'"  id="'.$field['id'].'" type="text" size="36" name="upload_image" value="'.$meta.'" data-old="'.$meta.'" />';							echo '<input class="upload_image_button" id="uploader_'.$field['id'].'" type="button" value="Upload Image" /><span class="uploader-save"></span>';							//echo '<p class="description">'.$field['desc'].'</p>';							break;						// checkbox						case 'checkbox':							$i = 1;							echo '<table class="wp_cta_check_box_table" data-old="'.$meta.'">';							if (!isset($meta)){$meta=array();}							elseif (!is_array($meta)){								$meta = array($meta);							}							foreach ($field['options'] as $value=>$label) {								if ($i==5||$i==1)								{									echo "<tr>";									$i=1;								}									echo '<td><input type="checkbox" name="'.$field['id'].'[]" id="'.$field['id'].'" value="'.$value.'" ',in_array($value,$meta) ? ' checked="checked"' : '','/>';									echo '<label for="'.$value.'">&nbsp;&nbsp;'.$label.'</label></td>';								if ($i==4)								{									echo "</tr>";								}								$i++;							}							echo "</table>";						   // echo '<div class="wp_cta_tooltip tool_checkbox" title="'.$field['desc'].'"></div>';						break;						// radio						case 'radio':							foreach ($field['options'] as $value=>$label) {								//echo $meta.":".$field['id'];								//echo "<br>";								echo '<input type="radio" name="'.$field['id'].'" id="'.$field['id'].'" data-old="'.$meta.'" value="'.$value.'" ',$meta==$value ? ' checked="checked"' : '','/>';								echo '<label for="'.$value.'">&nbsp;&nbsp;'.$label.'</label> &nbsp;&nbsp;&nbsp;&nbsp;';							}						  //  echo '<div class="wp_cta_tooltip" title="'.$field['desc'].'"></div>';						break;						// select						case 'dropdown':							echo '<select name="'.$field['id'].'" id="'.$field['id'].'" data-old="'.$meta.'" class="'.$raw_option_id.'">';							foreach ($field['options'] as $value=>$label) {								echo '<option', $meta == $value ? ' selected="selected"' : '', ' value="'.$value.'">'.$label.'</option>';							}							echo '</select>';						break;					} //end switch			echo '</div></div>';		} // end foreach		echo '</div>'; // end table	}}function wp_cta_wp_editor( $content, $id, $settings = array() ){	//echo $id;	$content = apply_filters('wp_cta_wp_editor_content',$content);	$id = apply_filters('wp_cta_wp_editor_id',$id);	$settings = apply_filters('wp_cta_wp_editor_settings',$settings);	//echo "hello";	//echo $id;exit;	wp_editor( $content, $id, $settings);}function wp_cta_display_headline_input($id,$main_headline){	//echo $id;	$id = apply_filters( 'wp_cta_prepare_input_id', $id );	echo "<input type='text' name='{$id}' id='{$id}' value='{$main_headline}' size='30'>";}/* Admin Settings page Function */function wp_cta_frontend_editor_screen(){	// show on screen else redirect to another page	if (isset($_GET['frontend-go'])&&$_GET['frontend-go']=='on')	{		$wp_cta_id = $_GET['wp_cta_id'];		$post_type_is = get_post_type($_GET['wp_cta_id']);		$post = get_post($wp_cta_id);		$admin_title = $post->post_title;		$letter = (isset($_GET['letter'])) ? '<span class="variation-letter-top">'.$_GET['letter'].'</span>' : '';		do_action('wp_cta_frontend_editor_screen_pre',$post);		if ($post_type_is !== "wp-call-to-action") {			echo "<style type='text/css'>.variation-letter-top {display:none;} #wp-cta-top-box{height:0px;} h1 {margin-top:35px;}</style>";		}		?>		<div id="wp-cta-top-box"><div id='wp-cta-options-controls'>  <a style="float:right; margin-right:5px;" class="reload"><?php _e( 'Reload Preview' , 'cta' ); ?></a>			<a style="float:right; margin-right:5px;" class="full-size-view"><?php _e( 'View fullsize' , 'cta' ); ?></a>			<a style="float:right; margin-right:5px; display:none;" class="shrink-view"><?php _e( 'Shrink View' , 'cta' ); ?></a>		 </div> </div>		<!-- The classes/id are important for jquery ajax to fire. don't change -->		<div id="wp-cta-frontend-options-container" class="wp-cta-options-customizer-area">			<h1><?php echo $letter;?><?php echo $admin_title;?></h1>			<div id="post_ID"><?php echo $wp_cta_id;?></div>			<form action="<?php echo $_SERVER["REQUEST_URI"] ?>" method="POST">				<div class="the-title wp-call-to-action-option-row">					<a id="click-the-title"  class="click-this" style="display:none;" href="#the-title"><?php _e( 'anchor' , 'cta' ); ?></a>						<div class="wp-call-to-action-table-header logo-label">							<label for="the-title"><?php _e( 'Main ' , 'cta' ); ?></label>						</div>						<div class="wp-call-to-action-option-td">						<?php if ($post_type_is === "wp-call-to-action") {						wp_cta_display_headline_input('wp-cta-main-headline',$main_headline);						} else {							echo '<input type="text" name="main_title" id="main_title" value="'.$admin_title.'" data-old="'.$admin_title.'" size="30" />';						}						?>						</div>				</div>				<?php				$template = get_post_meta($post->ID, 'wp-cta-selected-template', true);				$template = strtolower($template);				$key = array();				$key['args']['key'] = $template;				wp_cta_customizer_show_metabox($post,$key) ;				?>				<div class="the-content content-<?php echo $wp_cta_variation; ?> wp-call-to-action-option-row">					<a id="click-the-content" class="click-this" style="display:none;" href="#the-content"><?php _e( 'anchor' , 'cta' ); ?></a>						<div class="wp-call-to-action-table-header the-content-label">							<label for="the-content">							<?php _e( 'The Main Content Area' , 'cta' ); ?>							</label>						</div>					<div>						<div class="wp-call-to-action-option-td" id="the-content">							<?php							wp_cta_wp_editor( $content, 'wp_content', $settings = array('media_buttons' => TRUE, 'teeny' => FALSE) );							?>						</div>					</div>				</div>				<!-- Need form submit button here -->			</form>		</div>		<?php	} else {		$url = site_url();		header("Location: " . $url . "/wp-admin/edit.php?post_type=wp-call-to-action&notice=edit-note");	}}if (isset($_GET['notice'])&&$_GET['notice']=='edit-note'){	echo "<div style='font-size:28px; text-align:center; position:absolute; left:33%; top:59px;'>". __( 'Head into the landing page and click on frontend editor button!' , 'cta' ) ."</div>";}/* End Hidden Settings Page *//************ Main Page Window* This is the page window behind the frames***************//* Not working for some reason:function wp_cta_customizer_preview_window($hook){        wp_register_script('wp-cta-customizer-load-js', WP_CTA_URLPATH . 'js/customizer.load.js', array('jquery'));        wp_enqueue_script('wp-cta-customizer-load-js');}*/if (isset($_GET['cta-template-customize'])&&$_GET['cta-template-customize']=='on'){	add_filter('wp_head', 'wp_cta_launch_customizer');}function wp_cta_get_correct_dimensions($input, $css_prop) {		if (preg_match("/px/i", $input)){		   $input = (isset($input)) ? " ".$css_prop.": $input;" : '';		   } else if (preg_match("/%/", $input)) {		   $input = (isset($input)) ? " ".$css_prop.": $input;" : '';		   } else if (preg_match("/em/", $input)) {		   $input = (isset($input)) ? " ".$css_prop.": $input;" : '';		   } else {		   $input = " ".$css_prop.": $input" . "px;"; 		   } 		   return $input;}// need filter to not load the actual page behind the frames. AKA kill the botton contentfunction wp_cta_launch_customizer(){	//echo "here";exit;	global $post;	$page_id = $post->ID;	$permalink = get_permalink( $page_id );	$randomString = substr(str_shuffle("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"), 0, 10);	$wp_cta_variation = (isset($_GET['wp-cta-variation-id'])) ? $_GET['wp-cta-variation-id'] : '0';	$params = '?wp-cta-variation-id='.$wp_cta_variation.'&cache_bust='.$randomString.'&live-preview-area='.$randomString;	$preview_link = add_query_arg( array(  'cache_bust' => $randomString , 'live-preview-area' => 'true' , 'wmode' => 'opaque') , get_permalink( $page_id ) );	$preview_link = apply_filters( 'wp_cta_customizer_preview_link' , $preview_link );	$admin_url = admin_url();	$customizer_link = add_query_arg( array( 'wp-cta-variation-id' => $wp_cta_variation , 'action' => 'edit' , 'frontend' => 'true' ), admin_url() .'post.php?post='.$page_id );	do_action('wp_cta_launch_customizer_pre',$post);	?>	<style type="text/css">		#wpadminbar {			z-index: 99999999999 !important;		}		#wp-cta-live-preview #wpadminbar {			margin-top:0px;		}		.wp-cta-load-overlay {			position: absolute;			z-index: 9999999999 !important;			z-index: 999999;			background-color: #000;			opacity: 0;			background: -moz-radial-gradient(center,ellipse cover,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);			background: -webkit-gradient(radial,center center,0px,center center,100%,color-stop(0%,rgba(0,0,0,0.4)),color-stop(100%,rgba(0,0,0,0.9)));			background: -webkit-radial-gradient(center,ellipse cover,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);			background: -o-radial-gradient(center,ellipse cover,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);			background: -ms-radial-gradient(center,ellipse cover,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);			background: radial-gradient(center,ellipse cover,rgba(0,0,0,0.4) 0,rgba(0,0,0,0.9) 100%);			filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#66000000',endColorstr='#e6000000',GradientType=1);			-ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";			filter: alpha(opacity=50);		}		body.customize-support, body {			background-color: #eee !important;		background-image: linear-gradient(45deg, rgb(213, 213, 213) 25%, transparent 25%, transparent 75%, rgb(213, 213, 213) 75%, rgb(213, 213, 213)), linear-gradient(45deg, rgb(213, 213, 213) 25%, transparent 25%, transparent 75%, rgb(213, 213, 213) 75%, rgb(213, 213, 213)) !important;		background-size: 60px 60px !important;		background-position: 0 0, 30px 30px !important;		}	</style>	<script type="text/javascript">	jQuery(document).ready(function($) {		jQuery("#wp-admin-bar-edit a").text("Main Edit Screen");		setTimeout(function() {		      jQuery(document).find("#wp-cta-live-preview").contents().find("#wpadminbar").hide()				   jQuery(document).find("#wp-cta-live-preview").contents().find("html").css("margin-bottom", "-28px");		}, 2000);	 });	</script>	<?php	global $post;	global $wp_query;	$version = $_GET['wp-cta-variation-id'];	$current_page_id = $wp_query->get_queried_object_id();	$width = get_post_meta($current_page_id, 'wp_cta_width-'.$version, true);	$height = get_post_meta($current_page_id, 'wp_cta_height-'.$version, true);	//$replace = get_post_meta( 2112, 'wp_cta_global_bt_lists', true); // move to ext			$correct_height = wp_cta_get_correct_dimensions($height, 'height');	(!$correct_height) ? $correct_height = 'auto' : $correct_height = $correct_height;	$correct_width = 'width:100%;';		?>	<?php	echo '<div class="wp-cta-load-overlay" style="top: 0;bottom: 0; left: 0;right: 0;position: fixed;opacity: .8; display:none;"></div>';	echo '<table style="width:100%">';	echo '	<tr>';	echo '		<td style="width:35%">';	echo '			<iframe id="wp_cta_customizer_options" src="'.$customizer_link.'" style="width: 32%; height: 100%; position: fixed; left: 0px; z-index: 999999999; top: 26px;"></iframe>';	echo '		</td>';		echo '		<td>';	echo '			<iframe id="wp-cta-live-preview" scrolling="no" src="'.$preview_link.'" style="max-width: 100%; '.$correct_width.' height:1000px; position: fixed;  top: 20%; z-index: 1; border: none; overflow:hidden;	//background-image: linear-gradient(45deg, rgb(194, 194, 194) 25%, transparent 25%, transparent 75%, rgb(194, 194, 194) 75%, rgb(194, 194, 194)), linear-gradient(-45deg, rgb(194, 194, 194) 25%, transparent 25%, transparent 75%, rgb(194, 194, 194) 75%, rgb(194, 194, 194));	 background-position: initial initial; background-repeat: initial initial;"></iframe>';	echo '		</td>';	echo '	</tr>';	echo '</table>';	wp_footer();	exit;}add_action('wp_cta_launch_customizer_pre','wp_cta_ab_testing_customizer_enqueue');function wp_cta_ab_testing_customizer_enqueue($post){	wp_enqueue_style('wp_cta_ab_testing_customizer_css', WP_CTA_URLPATH . 'css/customizer-ab-testing.css');}function wp_cta_get_value($post, $key, $id){	if (isset($post))	{		$return = get_post_meta($post->ID, $key.'-'.$id , true);				return $return;	}}